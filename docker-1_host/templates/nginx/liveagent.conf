server {
    listen 80;

    ### Uncomment for debug
    #access_log /var/log/nginx/SERVER_NAME.access.log all;
    access_log off;

    server_name SERVER_NAME www.SERVER_NAME;

    return  301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;

    ### Uncomment for debug
    #access_log /var/log/nginx/SERVER_NAME.access.log all;


    access_log /var/log/nginx/SERVER_NAME.access.log all;
    error_log /var/log/nginx/SERVER_NAME.error.log warn;

    server_name SERVER_NAME www.SERVER_NAME;
    server_tokens off;

    ssl_certificate         /etc/nginx/ssl/ssl.crt;
    ssl_certificate_key     /etc/nginx/ssl/ssl.key;

    proxy_set_header   Host               $host;
    proxy_set_header   X-Real-IP          $remote_addr;
    proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto  $scheme;

    client_max_body_size       100m;
    client_body_buffer_size    128k;

    proxy_connect_timeout      900;
    proxy_send_timeout         900;
    proxy_read_timeout         900;

    proxy_buffer_size          32k;
    proxy_buffers              4 32k;

        #stream locations
            location ~ ^/event/ws {
                access_log off;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_buffering    off;
                proxy_redirect     off;

                proxy_pass         http://pushstream_subscriber;
                break;
            }

            location ~ ^/event/lp/v2 {
                access_log off;
                proxy_buffering    off;
                proxy_redirect     off;
                access_log         off;

                proxy_pass         http://pushstream_subscriber;
                post_action @update_visit_expire_new;
                break;
            }

            location ~ ^/event/ {
                access_log off;
                proxy_buffering    off;
                proxy_redirect     off;

                proxy_pass         http://pushstream_subscriber;
                break;
            }

            location @update_visit_expire_new {
                set $tenantId '';
                set $browserId $cookie_LaVisitorId;

                set_by_lua $nextlist '
                   local wholeminutes = math.floor(os.time() / 60)
                   return ngx.var.tenantId .. "_" .. wholeminutes
                ';

                redis2_query eval "local visitor_time = redis.call('hget', KEYS[1]..'_'..KEYS[2] ,'tt')\r\nredis.call('zadd', KEYS[3], visitor_time, KEYS[2])\r\nredis.call('expire', KEYS[3], 120)\r\nredis.call('expire', KEYS[1]..'_'..KEYS[2], 45)" 3 $tenantId $browserId $nextlist;

                redis2_pass redis;
                break;

            }

            location ~ ^/agent$ {
                return 301 /agent/;
            }

            location ~ ^/install {
                    return 403;
                    break;
            }

            # button tracking

            location ~ ^/scripts/button.php {
                set_unescape_uri $url_param $arg_p;
                rewrite ^/scripts/button.php /scripts/perf/button.php?i=$arg_i&t=$arg_t&ie9=$arg_ie9&v=$arg_v&m=$arg_m&ChS=$arg_ChS?;

                proxy_hide_header Expires;
                proxy_hide_header Cache-Control;

                proxy_pass  http://varnish;

                add_header Expires "Mon, 26 Jul 1997 05:00:00 GMT";
                add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";

                post_action @track_button_impression;
                break;
            }

            # visitor tracking

            location ~ ^/scripts/track_visit.php {
                set_by_lua_block $iscrawler {
                    if ngx.var['http_user_agent'] == nil then
                        return "false";
                    end

                    local useragent = string.lower(ngx.var['http_user_agent']);
                    local crawlers = {'googlebot', 'robot', 'slurp', 'yahooseeker', 'teoma', 'crawl', 'spider', 'msnbot', 'bingbot', 'adsbot', 'twitterbot', 'niki-bot', 'hrbot', 'yandex.com/bots', 'facebookexternalhit', 'facebot', 'bitlybot', 'tweetmemebot', 'linkisbot', 'datagnionbot', 'linkfluence.com', 'socialrankiobot', 'paperlibot', 'duckduckbot'};
                    local whitelist_crawlers = {'pixelrobot'};

                    for i, whitelist_crawler in ipairs(whitelist_crawlers) do
                        if useragent == whitelist_crawler then
                          return "false";
                        end
                    end

                    for i, crawler in ipairs(crawlers) do
                        if string.find(useragent, crawler) then
                          return "true";
                        end
                    end

                    return "false";
                }
                set $browser $arg_b;
                set $session $arg_s;
                set_unescape_uri $page_title $arg_pt;
                set_unescape_uri $page_url $arg_url;
                set_unescape_uri $page_ref $arg_ref;
                set $screen $arg_sr;
                set $user_details $arg_ud;
                set_formatted_gmt_time  $now "%Y-%m-%d %H:%M:%S";
                set $visitor_new $arg_vn;
                set $ip $http_x_real_ip;
                set_if_empty $ip $remote_addr;
                set $jsTrack $arg_jstk;

                rewrite ^/scripts/track_visit.php /scripts/perf/track_visit.php?jstk=$jsTrack?;

                proxy_hide_header Expires;
                proxy_hide_header Cache-Control;

                proxy_pass  http://varnish;

                add_header Expires "Mon, 26 Jul 1997 05:00:00 GMT";
                add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";

                if ($iscrawler != true) {
                    post_action @track_visit;
                }
                break;
            }

            # button tracking

            location @track_button_impression {
                set_formatted_gmt_time $now "%Y-%m-%d %H:%M:%S";
                redis2_query hincrby _$arg_i c 1;
                redis2_query hmset _$arg_i u "$url_param" t "$now";
                redis2_pass redis;
                break;
            }


            # visitor tracking

            location @track_visit {
               set_formatted_gmt_time $timestamp "%s";

                # browser entry
                redis2_query hmset _$browser s "$session" dlv "$now" tt "$timestamp" u "$page_url" r "$page_ref" i "$ip" ua "$http_user_agent" sc "$screen" ud "$user_details" vn "$visitor_new";
                redis2_query hsetnx _$browser dfv $now;
                redis2_query expire _$browser 45;

                set $expireactuallist "70";
                set $expirenextlist "140";
                set $actuallist "0";
                set $nextlist "0";

                set_by_lua $nextlist '
                    local wholeminutes = math.floor(os.time() / 60)
                    ngx.var.actuallist = "_" .. (wholeminutes - 1)
                    return "_" .. wholeminutes
                ';

                redis2_query zadd $actuallist $timestamp $browser;
                redis2_query expire $actuallist $expireactuallist;
                redis2_query zadd $nextlist $timestamp $browser;
                redis2_query expire $nextlist $expirenextlist;

                redis2_pass redis;

                post_action @track_page_visit;
                break;
            }

            location @track_page_visit {
                set $args '';

                rewrite ^/scripts/perf/track_visit.php /_bulk;

                proxy_method POST;
                proxy_connect_timeout      5s;
                proxy_read_timeout         5s;

                set_quote_json_str $browser;
                set_quote_json_str $page_url;
                set_quote_json_str $page_ref;
                set_quote_json_str $page_title;
                set_formatted_gmt_time $today "%Y_%m_%d";


                proxy_set_header   Content-type    "application/x-ndjson";

                proxy_set_body '{"index":{"_type":"pagevisits", "_index":"la_perf_pagevisit_v1.1_${today}"}}
{"b":${browser}, "dv":"${now}", "t":${page_title}, "u":${page_url}, "r":${page_ref}, "tenant_id":""}
';

                proxy_pass  http://elasticsearch;
                break;
            }

    # Default location

            location / {
                add_header X-Accel-Buffering no;
                proxy_pass         http://varnish;
                proxy_redirect     off;
                proxy_buffering off;
            }
}
